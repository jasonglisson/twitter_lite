<?php

function twitter_lite_menu() {
	$items = array();
	$items['admin/config/content/twitter_lite'] = array(
		'title' => 'Twitter Lite',
		'description' => 'Configuration for Twitter feed blocks.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('twitter_lite_form'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);  
  
  return $items;
} 

function twitter_lite_form($form, &$form_state) {
	$form = array();
	
	$form['twitter_username'] = array(
		'#type' => 'textfield',
		'#title' => t('Twitter Username'),
		'#default_value' => variable_get('twitter_username'),
		'#size' => 100,
		'#maxlength' => 100,
		'#description' => t('The username that is used on the twitter account. Without the @ symbol.'),
		'#required' => TRUE,
	);
	$form['tweets_number_block_1'] = array(
	    '#type' => 'select',
	    '#title' => t('Number of tweets to display: Block 1'), 
	    '#default_value' => variable_get('tweets_number_block_1'),
	    '#options' => array(
          1 => t('1'),
          2 => t('2'),
          3 => t('3'),  
          4 => t('4'),
          5 => t('5'),
          6 => t('6'), 
          7 => t('7'),
          8 => t('8'),
          9 => t('9'),  
          10 => t('10'),                                        
        ),
	    '#maxlength' => 2, 
	    '#required' => FALSE,
	);	
	$form['tweets_number_block_2'] = array(
	    '#type' => 'select', 
	    '#title' => t('Number of tweets to display: Block 2'),
	    '#default_value' => variable_get('tweets_number_block_2'),
	    '#options' => array(
          1 => t('1'),
          2 => t('2'),
          3 => t('3'),  
          4 => t('4'),
          5 => t('5'),
          6 => t('6'), 
          7 => t('7'),
          8 => t('8'),
          9 => t('9'),  
          10 => t('10'),                                       
        ),
	    '#maxlength' => 2, 
	    '#required' => FALSE,
	);		
	$form['tweets'] = array(
		'#type' => 'fieldset',
		'#title' => t('Twitter API'),
		'#description' => t('If you don\'t have an API key, please go to this URL to get one: <a href="https://apps.twitter.com/" target="_blank">https://apps.twitter.com/</a>'),				
		'#collapsible' => TRUE,
		'#collapsed' => FALSE, 		
/* 		'#tree' => TRUE, */
	);
	$form['tweets']['oauth'] = array(
	    '#type' => 'textfield',
	    '#title' => t('OAuth Access Token'),
		'#default_value' => variable_get('oauth'),	    	    	    
		'#required' => FALSE,
	);
	$form['tweets']['secret'] = array(
	    '#type' => 'textfield',
	    '#title' => t('OAuth Access Token Secret'),
		'#default_value' => variable_get('secret'),
		'#required' => FALSE,	
	);
	$form['tweets']['key'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Consumer Key'), 
		'#default_value' => variable_get('key'),	    
		'#required' => FALSE,	
	);	
	$form['tweets']['consumer'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Consumer Secret'),
		'#default_value' => variable_get('consumer'),	    
		'#required' => FALSE,		
	);		

  return system_settings_form($form);
}	

// Twitter API Block
function twitter_1() {
	
	$token = variable_get('oauth');
	$token_secret = variable_get('secret');
	$consumer_key = variable_get('key');
	$consumer_secret = variable_get('consumer');
	
	$host = 'api.twitter.com';
	$method = 'GET';
	$path = '/1.1/statuses/user_timeline.json'; // api call path
	
	$query = array( // query parameters
	    'screen_name' => variable_get('twitter_username'),
	    'count' => variable_get('tweets_number_block_1')
	);
	
	$oauth = array(
	    'oauth_consumer_key' => $consumer_key,
	    'oauth_token' => $token,
	    'oauth_nonce' => (string)mt_rand(), // a stronger nonce is recommended
	    'oauth_timestamp' => time(),
	    'oauth_signature_method' => 'HMAC-SHA1',
	    'oauth_version' => '1.0'
	);
	
	$oauth = array_map("rawurlencode", $oauth); // must be encoded before sorting
	$query = array_map("rawurlencode", $query);
	
	$arr = array_merge($oauth, $query); // combine the values THEN sort
	
	asort($arr); // secondary sort (value)
	ksort($arr); // primary sort (key)
	
	// http_build_query automatically encodes, but our parameters
	// are already encoded, and must be by this point, so we undo
	// the encoding step
	$querystring = urldecode(http_build_query($arr, '', '&'));
	
	$url = "https://$host$path";
	
	// mash everything together for the text to hash
	$base_string = $method."&".rawurlencode($url)."&".rawurlencode($querystring);
	
	// same with the key
	$key = rawurlencode($consumer_secret)."&".rawurlencode($token_secret);
	
	// generate the hash
	$signature = rawurlencode(base64_encode(hash_hmac('sha1', $base_string, $key, true)));
	
	// this time we're using a normal GET query, and we're only encoding the query params
	// (without the oauth params)
	$url .= "?".http_build_query($query);
	
	$oauth['oauth_signature'] = $signature; // don't want to abandon all that work!
	ksort($oauth); // probably not necessary, but twitter's demo does it
	
	// also not necessary, but twitter's demo does this too
	function add_quotes($str) { return '"'.$str.'"'; }
	$oauth = array_map("add_quotes", $oauth);
	
	// this is the full value of the Authorization line
	$auth = "OAuth " . urldecode(http_build_query($oauth, '', ', '));
	
	// if you're doing post, you need to skip the GET building above
	// and instead supply query parameters to CURLOPT_POSTFIELDS
	$options = array( CURLOPT_HTTPHEADER => array("Authorization: $auth"),
	                  //CURLOPT_POSTFIELDS => $postfields,
	                  CURLOPT_HEADER => false,
	                  CURLOPT_URL => $url,
	                  CURLOPT_RETURNTRANSFER => true,
	                  CURLOPT_SSL_VERIFYPEER => false);
	
	// do our business
	$feed = curl_init();
	curl_setopt_array($feed, $options);
	$json = curl_exec($feed);
	curl_close($feed);
	
	$twitter_data = json_decode($json);

	
	function linkify_tweet($twitter_data) {
	
		//Convert urls to <a> links
		$twitter_data = preg_replace("/([\w]+\:\/\/[\w-?&;#~=\.\/\@]+[\w\/])/", "<a target=\"_blank\" href=\"$1\">$1</a>", $twitter_data);
		
		//Convert hashtags to twitter searches in <a> links
		$twitter_data = preg_replace("/#([A-Za-z0-9\/\.]*)/", "<a target=\"_new\" href=\"http://twitter.com/search?q=$1\">#$1</a>", $twitter_data);
		
		//Convert attags to twitter profiles in <a> links
		$twitter_data = preg_replace("/@([A-Za-z0-9\/\.]*)/", "<a target=\"_blank\" href=\"http://www.twitter.com/$1\">@$1</a>", $twitter_data);
		
		return $twitter_data;
	
	}	
	
/* 	print_r($twitter_data); */

	
	if (empty($twitter_data)) {
	
		$content = '<div class="large-12 columns alert-box alert">Please check the username you\'ve entered.</div>';
		$content .= '<br><br><br><br>';
		return $content;	
				
	} else {
	// play with the data!

		$tweets = $twitter_data;

/* 		print_r($tweets); */

		$content = "<div class=\"twitter-wrap\">";
		$content .= '<ul class="">';			
			foreach ($tweets as $tweet) {
				$content .=  '<li class="row">';
					$content .=  '<div class="tweet-logo"><img src="' . $tweet->user->profile_image_url . '"></div>';					
					$content .=  '<div class="tweet-text">' . linkify_tweet($tweet->text) . '';		
					$content .=  '<div class="intents">';
					$content .=  '<span class="reply"><a target="_blank" href="https://twitter.com/intent/tweet?in_reply_to=' . $tweet->id . '">Reply</a></span>';
					$content .=  '<span class="retweet"><a target="_blank" href="https://twitter.com/intent/retweet?tweet_id=' . $tweet->id . '">Retweet</a></span>';
					$content .=  '<span class="favorite"><a target="_blank" href="https://twitter.com/intent/favorite?tweet_id=' . $tweet->id .'">Favorite</a></span>';
					$content .=  '</div></div>';																				
				$content .= '</li>';
			}
		$content .= '</ul>';
		
		return $content;
	}		
	
}


// Twitter API Block
function twitter_2() {
	
	$token = variable_get('oauth');
	$token_secret = variable_get('secret');
	$consumer_key = variable_get('key');
	$consumer_secret = variable_get('consumer');
	
	$host = 'api.twitter.com';
	$method = 'GET';
	$path = '/1.1/statuses/user_timeline.json'; // api call path
	
	$query = array( // query parameters
	    'screen_name' => variable_get('twitter_username'),
	    'count' => variable_get('tweets_number_block_2')
	);
	
	$oauth = array(
	    'oauth_consumer_key' => $consumer_key,
	    'oauth_token' => $token,
	    'oauth_nonce' => (string)mt_rand(), // a stronger nonce is recommended
	    'oauth_timestamp' => time(),
	    'oauth_signature_method' => 'HMAC-SHA1',
	    'oauth_version' => '1.0'
	);
	
	$oauth = array_map("rawurlencode", $oauth); // must be encoded before sorting
	$query = array_map("rawurlencode", $query);
	
	$arr = array_merge($oauth, $query); // combine the values THEN sort
	
	asort($arr); // secondary sort (value)
	ksort($arr); // primary sort (key)
	
	// http_build_query automatically encodes, but our parameters
	// are already encoded, and must be by this point, so we undo
	// the encoding step
	$querystring = urldecode(http_build_query($arr, '', '&'));
	
	$url = "https://$host$path";
	
	// mash everything together for the text to hash
	$base_string = $method."&".rawurlencode($url)."&".rawurlencode($querystring);
	
	// same with the key
	$key = rawurlencode($consumer_secret)."&".rawurlencode($token_secret);
	
	// generate the hash
	$signature = rawurlencode(base64_encode(hash_hmac('sha1', $base_string, $key, true)));
	
	// this time we're using a normal GET query, and we're only encoding the query params
	// (without the oauth params)
	$url .= "?".http_build_query($query);
	
	$oauth['oauth_signature'] = $signature; // don't want to abandon all that work!
	ksort($oauth); // probably not necessary, but twitter's demo does it
	
	// also not necessary, but twitter's demo does this too
	function add_quotes($str) { return '"'.$str.'"'; }
	$oauth = array_map("add_quotes", $oauth);
	
	// this is the full value of the Authorization line
	$auth = "OAuth " . urldecode(http_build_query($oauth, '', ', '));
	
	// if you're doing post, you need to skip the GET building above
	// and instead supply query parameters to CURLOPT_POSTFIELDS
	$options = array( CURLOPT_HTTPHEADER => array("Authorization: $auth"),
	                  //CURLOPT_POSTFIELDS => $postfields,
	                  CURLOPT_HEADER => false,
	                  CURLOPT_URL => $url,
	                  CURLOPT_RETURNTRANSFER => true,
	                  CURLOPT_SSL_VERIFYPEER => false);
	
	// do our business
	$feed = curl_init();
	curl_setopt_array($feed, $options);
	$json = curl_exec($feed);
	curl_close($feed);
	
	$twitter_data = json_decode($json);
	
	function linkify_tweet($twitter_data) {
	
		//Convert urls to <a> links
		$twitter_data = preg_replace("/([\w]+\:\/\/[\w-?&;#~=\.\/\@]+[\w\/])/", "<a target=\"_blank\" href=\"$1\">$1</a>", $twitter_data);
		
		//Convert hashtags to twitter searches in <a> links
		$twitter_data = preg_replace("/#([A-Za-z0-9\/\.]*)/", "<a target=\"_new\" href=\"http://twitter.com/search?q=$1\">#$1</a>", $twitter_data);
		
		//Convert attags to twitter profiles in <a> links
		$twitter_data = preg_replace("/@([A-Za-z0-9\/\.]*)/", "<a target=\"_blank\" href=\"http://www.twitter.com/$1\">@$1</a>", $twitter_data);
		
		return $twitter_data;

	}
	
	print_r($twitter_data);

	
	if (empty($twitter_data)) {
	
		$content = '<div class="large-12 columns alert-box alert">Please check the username you are looking for. They may go by a different name or their full name instead of a nickname.</div>';
		$content .= '<br><br><br><br>';
		return $content;	
				
	} else {
	// play with the data!
		$tweets = $twitter_data;
	
		$content = "<div class=\"congress-wrap row\">";
		$content .= '<ul class="large-12 columns">';			
			foreach ($tweets as $tweet) {					
				$content .=  '<div>' . $tweet->text . '</div>';																	
				$content .= '</li>';
			}
		$content .= '</ul>';
		
		return $content;
	}		
	
}

/**
 * Implements hook_block_info().
 */
function twitter_lite_block_info() {
	$blocks['twitter_block_1'] = array(
		'info' => t('Tweets Block 1'),
		'cache' => DRUPAL_NO_CACHE,
	); 
	$blocks['twitter_block_2'] = array(
		'info' => t('Tweets Block 2'),
		'cache' => DRUPAL_NO_CACHE,
	);    	
	return $blocks;
}
 
/**
 * Implements hook_block_view().
 */
function twitter_lite_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'twitter_block_1': 
      $block['subject'] = t('Tweets Block 1');
      $block['content'] = twitter_1();
      break;    
    case 'twitter_block_2': 
      $block['subject'] = t('Tweets Block 2');
      $block['content'] = twitter_2();
      break;                
  }
  return $block;
}

?>